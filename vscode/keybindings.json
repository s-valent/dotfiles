[
    // visibility
    {
        "key": "cmd+j",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    {
        "key": "cmd+shift+j",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "cmd+l",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "cmd+l",
        "command": "-expandLineSelection"
    },
    {
        "key": "cmd+b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "alt+cmd+b",
        "command": "-workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "cmd+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    // focus
    {
        "key": "cmd+-",
        "command": "workbench.action.focusSideBar",
        "when": "!sideBarFocus"
    },
    {
        "key": "cmd+-",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "sideBarFocus"
    },
    {
        "key": "cmd+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "shift+cmd+-",
        "command": "-workbench.action.zoomOut"
    },
    {
        "key": "cmd+=",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "cmd+=",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+=",
        "command": "-workbench.action.zoomIn"
    },
    {
        "key": "tab",
        "command": "togglePeekWidgetFocus",
        "when": "referenceSearchVisible || inReferenceSearchEditor"
    },
    // jump history
    {
        "key": "ctrl+o",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack"
    },
    {
        "key": "ctrl+i",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    // lsp
    {
        "key": "alt+enter",
        "command": "editor.action.goToDeclaration",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "cmd+alt+enter",
        "command": "references-view.findReferences",
        "when": "editorHasReferenceProvider"
    },
    // cursors
    {
        "key": "ctrl+shift+down",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+down",
        "command": "-editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+up",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "-editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+up",
        "command": "editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+up",
        "command": "-editor.action.insertCursorAbove",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+down",
        "command": "editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+down",
        "command": "-editor.action.insertCursorBelow",
        "when": "editorTextFocus"
    },
    // run
    {
        "key": "cmd+r",
        "command": "workbench.action.terminal.runActiveFile"
    },
    {
        "key": "cmd+r",
        "command": "python.execInTerminal",
        // "command": "jupyter.runFileInteractive",
        "when": "editorLangId == python"
    },
    {
        "key": "cmd+r",
        "command": "language-julia.executeCell",
        "when": "editorTextFocus && activeEditor != 'workbench.editor.notebook' && editorLangId in 'julia.supportedLanguageIds'"
    },
    {
        "key": "cmd+r",
        "command": "jupyter.runcurrentcell",
        "when": "editorTextFocus && isWorkspaceTrusted && jupyter.hascodecells && !editorHasSelection && !jupyter.havenativecells && !notebookEditorFocused"
    },
    {
        "key": "cmd+r",
        "command": "markdown.showPreviewToSide",
        "when": "!notebookEditorFocused && editorLangId == 'markdown'"
    },
    {
        "key": "cmd+r",
        "command": "sqltools.executeCurrentQuery",
        "when": "editorTextFocus && editorLangId == sql"
    },
    // tabs and windows
    {
        "key": "cmd+t",
        "command": "workbench.action.terminal.newInActiveWorkspace",
        "when": "terminalFocus"
    },
    {
        "key": "cmd+t",
        "command": "workbench.action.files.newUntitledFile",
        "when": "!terminalFocus"
    },
    {
        "key": "cmd+t",
        "command": "-workbench.action.showAllSymbols"
    },
    {
        "key": "cmd+n",
        "command": "workbench.action.newWindow"
    },
    {
        "key": "cmd+n",
        "command": "-workbench.action.files.newUntitledFile"
    },
    {
        "key": "shift+cmd+n",
        "command": "-workbench.action.newWindow"
    },
    {
        "key": "ctrl+tab",
        "command": "workbench.action.terminal.focusNext",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.terminal.focusPrevious",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    {
        "key": "cmd+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus && terminalHasBeenCreated && !terminalEditorFocus || terminalFocus && terminalProcessSupported && !terminalEditorFocus"
    },
    // random things
    {
        "key": "shift+cmd+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "alt+cmd+t",
        "command": "workbench.action.tasks.runTask"
    },
    {
        "key": "alt+cmd+t",
        "command": "-workbench.action.closeOtherEditors"
    },
    // fix neovim ext
    {
        "key": "enter",
        "command": "-list.select",
        "when": "listFocus && !inputFocus && !notebookCellListFocused"
    },
    // terminal
    {
        "key": "alt+left",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001Bb"
        },
        "when": "terminalFocus"
    },
    {
        "key": "alt+right",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001Bf"
        },
        "when": "terminalFocus"
    },
    {
        "key": "cmd+left",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001BOH"
        },
        "when": "terminalFocus"
    },
    {
        "key": "cmd+right",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001BOF"
        },
        "when": "terminalFocus"
    },
    {
        "key": "cmd+delete",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u0015"
        },
        "when": "terminalFocus"
    },
    {
        "key": "alt+delete",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001B\u007F"
        },
        "when": "terminalFocus"
    },
    {
        "key": "alt+backspace",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001B\u007F"
        },
        "when": "terminalFocus"
    },
    {
        "key": "cmd+z",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
            "text": "\u001F"
        },
        "when": "terminalFocus"
    },
    // arrows pick files
    {
        "key": "up",
        "command": "runCommands",
        "args": {
            "commands": [
                "list.focusUp",
                "list.collapseAllToFocus",
                "list.toggleExpand"
            ]
        },
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "down",
        "command": "runCommands",
        "args": {
            "commands": [
                "list.focusDown",
                "list.collapseAllToFocus",
                "list.toggleExpand"
            ]
        },
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    }
]
